"use strict";function isArray(r){return _.isArray(r)}function isObject(r){return r instanceof Object&&!isArray(r)}function isString(r){return _.isString(r)}function ensureValidEnumKeyName(r){if(!r||"string"!=typeof r||!isNaN(parseInt(r)))throw"bad enum key: "+r}function keysFromArray(r){for(var e=[],n=0,t=r.length;t>n;++n){var s=r[n],i=keysFromString(s);e=e.concat(i)}return e}function keysFromObject(r){var e=[];for(var n in r)r.hasOwnProperty(n)&&(ensureValidEnumKeyName(n),e.push(n));return e}function keysFromString(r){for(var e=r.split(/[,;:\s]+/),n=0,t=e.length;t>n;++n)ensureValidEnumKeyName(e[n]);return e}function getIsFuncName(r){return ensureValidEnumKeyName(r),"is"+_.capitalize(_.camelCase(r))}function buildEnum(r,e,n){for(var t=0,s=r.length;s>t;++t){var i=r[t],a={_id:i,_seq:t};e[i]=a,extendIsFuncsToEnumItem(a,r,n)}}function extendIsFuncsToEnumItem(r,e,n){r.toString=function(){return r._id},r.name=r.toString,e&&n&&(r._kl=e),e&&_.forEach(e,function(e){var n=getIsFuncName(e);r[n]=function(){return e===r._id}}),r.is=function(e){return e===r?!0:null===e||"undefined"==typeof e||e===!1?!1:e===r._seq?!0:e._id?e._id===r._id:"string"==typeof e?e.toUpperCase()===r._id.toUpperCase():!1}}function freeze(r){return Object&&Object.freeze?Object.freeze(r):r}function seal(r){return Object&&Object.seal?Object.seal(r):r}var _=require("lodash"),genEnum=function(r){var e=[];if(arguments.length>1)e=keysFromArray(arguments);else if(isArray(r))e=keysFromArray(r);else if(isObject(r))e=keysFromObject(r);else{if(!isString(r))throw new Error("Argument must be a string or an array of strings.");e=keysFromString(r)}var n={};return buildEnum(e,n,!0),freeze(n)};genEnum["transient"]=function(r){var e=[];if(arguments.length>1)e=keysFromArray(arguments);else if(isArray(r))e=keysFromArray(r);else if(isObject(r))e=keysFromObject(r);else{if(!isString(r))throw new Error("Argument must be a string or an array of strings.");e=keysFromString(r)}var n={};return buildEnum(e,n,!1),freeze(n)},genEnum.lite=genEnum["transient"];var genConst=function(r){var e=[];if(arguments.length>1)e=keysFromArray(arguments);else if(isArray(r))e=keysFromArray(r);else if(isObject(r))e=keysFromObject(r);else{if(!isString(r))throw new Error("Argument must be a string or an array of strings.");e=keysFromString(r)}for(var n={},t=0,s=e.length;s>t;++t){var i=e[t];n[i]=i}return freeze(n)},_genBitmap=function(r){var e=[],n=!1,t=!1;if(arguments.length>1)if("boolean"==typeof arguments[0]){n=arguments[0];var s=[];if(Array.prototype.push.apply(s,arguments),s.shift(),1==s.length)if(r=s[0],isString(r))e=keysFromString(r);else if(isObject(r))t=r,e=keysFromObject(r);else{if(!isArray(r))throw new Error("Argument must be a string or an array of strings.");e=keysFromArray(r)}else e=keysFromArray(s)}else e=keysFromArray(arguments);else if(isArray(r))e=keysFromArray(r);else if(isObject(r))t=r,e=keysFromObject(r);else{if(!isString(r))throw new Error("Argument must be a string or an array of strings.");e=keysFromString(r)}for(var i={},a=0,u=e.length;u>a;++a){var o=e[a];i[o]=t&&"boolean"==typeof t[o]?t[o]:n}return i},genBitmap=function(r){var e=_genBitmap.apply(this,arguments);return seal(e)};genBitmap.immutable=function(r){return freeze(_genBitmap.apply(this,arguments))};var _unJSON=function(r){if(r&&r._id)extendIsFuncsToEnumItem(r,r._kl,!0);else if(isObject(r))for(var e in r)r.hasOwnProperty(e)&&_unJSON(r[e])},unJSON=function(r){return"string"==typeof r&&(r=JSON.parse(r)),_unJSON(r),r};module.exports={"enum":genEnum,"const":genConst,bitmap:genBitmap,unJSON:unJSON};